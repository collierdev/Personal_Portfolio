{"ast":null,"code":"import _slicedToArray from \"E:/Personal_Portfolio/server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// creates a matcher function\nexport default function makeMatcher() {\n  var makeRegexpFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : pathToRegexp;\n  var cache = {}; // obtains a cached regexp version of the pattern\n\n  var getRegexp = function getRegexp(pattern) {\n    return cache[pattern] || (cache[pattern] = makeRegexpFn(pattern));\n  };\n\n  return function (pattern, path) {\n    var _getRegexp = getRegexp(pattern || \"\"),\n        regexp = _getRegexp.regexp,\n        keys = _getRegexp.keys;\n\n    var out = regexp.exec(path);\n    if (!out) return [false, null]; // formats an object with matched params\n\n    var params = keys.reduce(function (params, key, i) {\n      params[key.name] = out[i + 1];\n      return params;\n    }, {});\n    return [true, params];\n  };\n} // escapes a regexp string (borrowed from path-to-regexp sources)\n// https://github.com/pillarjs/path-to-regexp/blob/v3.0.0/index.js#L202\n\nvar escapeRx = function escapeRx(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}; // returns a segment representation in RegExp based on flags\n// adapted and simplified version from path-to-regexp sources\n\n\nvar rxForSegment = function rxForSegment(repeat, optional, prefix) {\n  var capture = repeat ? \"((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*)\" : \"([^\\\\/]+?)\";\n  if (optional && prefix) capture = \"(?:\\\\/\" + capture + \")\";\n  return capture + (optional ? \"?\" : \"\");\n};\n\nvar pathToRegexp = function pathToRegexp(pattern) {\n  var groupRx = /:([A-Za-z0-9_]+)([?+*]?)/g;\n  var match = null,\n      lastIndex = 0,\n      keys = [],\n      result = \"\";\n\n  while ((match = groupRx.exec(pattern)) !== null) {\n    var _match = match,\n        _match2 = _slicedToArray(_match, 3),\n        _ = _match2[0],\n        segment = _match2[1],\n        mod = _match2[2]; // :foo  [1]      (  )\n    // :foo? [0 - 1]  ( o)\n    // :foo+ [1 - ∞]  (r )\n    // :foo* [0 - ∞]  (ro)\n\n\n    var repeat = mod === \"+\" || mod === \"*\";\n    var optional = mod === \"?\" || mod === \"*\";\n    var prefix = optional && pattern[match.index - 1] === \"/\" ? 1 : 0;\n    var prev = pattern.substring(lastIndex, match.index - prefix);\n    keys.push({\n      name: segment\n    });\n    lastIndex = groupRx.lastIndex;\n    result += escapeRx(prev) + rxForSegment(repeat, optional, prefix);\n  }\n\n  result += escapeRx(pattern.substring(lastIndex));\n  return {\n    keys: keys,\n    regexp: new RegExp(\"^\" + result + \"(?:\\\\/)?$\", \"i\")\n  };\n};","map":{"version":3,"sources":["E:/Personal_Portfolio/server/client/node_modules/wouter/matcher.js"],"names":["makeMatcher","makeRegexpFn","pathToRegexp","cache","getRegexp","pattern","path","regexp","keys","out","exec","params","reduce","key","i","name","escapeRx","str","replace","rxForSegment","repeat","optional","prefix","capture","groupRx","match","lastIndex","result","_","segment","mod","index","prev","substring","push","RegExp"],"mappings":"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","sourcesContent":["// creates a matcher function\nexport default function makeMatcher(makeRegexpFn = pathToRegexp) {\n  let cache = {};\n\n  // obtains a cached regexp version of the pattern\n  const getRegexp = (pattern) =>\n    cache[pattern] || (cache[pattern] = makeRegexpFn(pattern));\n\n  return (pattern, path) => {\n    const { regexp, keys } = getRegexp(pattern || \"\");\n    const out = regexp.exec(path);\n\n    if (!out) return [false, null];\n\n    // formats an object with matched params\n    const params = keys.reduce((params, key, i) => {\n      params[key.name] = out[i + 1];\n      return params;\n    }, {});\n\n    return [true, params];\n  };\n}\n\n// escapes a regexp string (borrowed from path-to-regexp sources)\n// https://github.com/pillarjs/path-to-regexp/blob/v3.0.0/index.js#L202\nconst escapeRx = (str) => str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n\n// returns a segment representation in RegExp based on flags\n// adapted and simplified version from path-to-regexp sources\nconst rxForSegment = (repeat, optional, prefix) => {\n  let capture = repeat ? \"((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*)\" : \"([^\\\\/]+?)\";\n  if (optional && prefix) capture = \"(?:\\\\/\" + capture + \")\";\n  return capture + (optional ? \"?\" : \"\");\n};\n\nconst pathToRegexp = (pattern) => {\n  const groupRx = /:([A-Za-z0-9_]+)([?+*]?)/g;\n\n  let match = null,\n    lastIndex = 0,\n    keys = [],\n    result = \"\";\n\n  while ((match = groupRx.exec(pattern)) !== null) {\n    const [_, segment, mod] = match;\n\n    // :foo  [1]      (  )\n    // :foo? [0 - 1]  ( o)\n    // :foo+ [1 - ∞]  (r )\n    // :foo* [0 - ∞]  (ro)\n    const repeat = mod === \"+\" || mod === \"*\";\n    const optional = mod === \"?\" || mod === \"*\";\n    const prefix = optional && pattern[match.index - 1] === \"/\" ? 1 : 0;\n\n    const prev = pattern.substring(lastIndex, match.index - prefix);\n\n    keys.push({ name: segment });\n    lastIndex = groupRx.lastIndex;\n\n    result += escapeRx(prev) + rxForSegment(repeat, optional, prefix);\n  }\n\n  result += escapeRx(pattern.substring(lastIndex));\n  return { keys, regexp: new RegExp(\"^\" + result + \"(?:\\\\/)?$\", \"i\") };\n};\n"]},"metadata":{},"sourceType":"module"}