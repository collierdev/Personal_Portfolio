{"ast":null,"code":"import _slicedToArray from \"E:/Personal_Portfolio/server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState, useCallback } from \"./react-deps.js\";\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\n\nvar eventPopstate = \"popstate\";\nvar eventPushState = \"pushState\";\nvar eventReplaceState = \"replaceState\";\nexport var events = [eventPopstate, eventPushState, eventReplaceState];\nexport default (function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$base = _ref.base,\n      base = _ref$base === void 0 ? \"\" : _ref$base;\n\n  var _useState = useState(function () {\n    return {\n      path: currentPathname(base),\n      search: location.search\n    };\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      pathAndSearch = _useState2[0],\n      update = _useState2[1]; // @see https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n\n\n  var prevHash = useRef(pathAndSearch.path + pathAndSearch.search);\n  useEffect(function () {\n    // this function checks if the location has been changed since the\n    // last render and updates the state only when needed.\n    // unfortunately, we can't rely on `path` value here, since it can be stale,\n    // that's why we store the last pathname in a ref.\n    var checkForUpdates = function checkForUpdates() {\n      var pathname = currentPathname(base);\n      var search = location.search;\n      var hash = pathname + search;\n\n      if (prevHash.current !== hash) {\n        prevHash.current = hash;\n        update({\n          path: pathname,\n          search: search\n        });\n      }\n    };\n\n    events.map(function (e) {\n      return addEventListener(e, checkForUpdates);\n    }); // it's possible that an update has occurred between render and the effect handler,\n    // so we run additional check on mount to catch these updates. Based on:\n    // https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n\n    checkForUpdates();\n    return function () {\n      return events.map(function (e) {\n        return removeEventListener(e, checkForUpdates);\n      });\n    };\n  }, [base]); // the 2nd argument of the `useLocation` return value is a function\n  // that allows to perform a navigation.\n  //\n  // the function reference should stay the same between re-renders, so that\n  // it can be passed down as an element prop without any performance concerns.\n\n  var navigate = useCallback(function (to) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$replace = _ref2.replace,\n        replace = _ref2$replace === void 0 ? false : _ref2$replace;\n\n    return history[replace ? eventReplaceState : eventPushState](null, \"\", // handle nested routers and absolute paths\n    to[0] === \"~\" ? to.slice(1) : base + to);\n  }, [base]);\n  return [pathAndSearch.path, navigate];\n}); // While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\n\nif (typeof history !== \"undefined\") {\n  var _loop = function _loop() {\n    var type = _arr[_i];\n    var original = history[type];\n\n    history[type] = function () {\n      var result = original.apply(this, arguments);\n      var event = new Event(type);\n      event.arguments = arguments;\n      dispatchEvent(event);\n      return result;\n    };\n  };\n\n  for (var _i = 0, _arr = [eventPushState, eventReplaceState]; _i < _arr.length; _i++) {\n    _loop();\n  }\n}\n\nvar currentPathname = function currentPathname(base) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.pathname;\n  return !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || \"/\" : \"~\" + path;\n};","map":{"version":3,"sources":["E:/Personal_Portfolio/server/client/node_modules/wouter/use-location.js"],"names":["useEffect","useRef","useState","useCallback","eventPopstate","eventPushState","eventReplaceState","events","base","path","currentPathname","search","location","pathAndSearch","update","prevHash","checkForUpdates","pathname","hash","current","map","e","addEventListener","removeEventListener","navigate","to","replace","history","slice","type","original","result","apply","arguments","event","Event","dispatchEvent","toLowerCase","indexOf","length"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState, useCallback } from \"./react-deps.js\";\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nconst eventPopstate = \"popstate\";\nconst eventPushState = \"pushState\";\nconst eventReplaceState = \"replaceState\";\nexport const events = [eventPopstate, eventPushState, eventReplaceState];\n\nexport default ({ base = \"\" } = {}) => {\n  const [pathAndSearch, update] = useState(() => ({\n    path: currentPathname(base),\n    search: location.search,\n  })); // @see https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const prevHash = useRef(pathAndSearch.path + pathAndSearch.search);\n\n  useEffect(() => {\n    // this function checks if the location has been changed since the\n    // last render and updates the state only when needed.\n    // unfortunately, we can't rely on `path` value here, since it can be stale,\n    // that's why we store the last pathname in a ref.\n    const checkForUpdates = () => {\n      const pathname = currentPathname(base);\n      const search = location.search;\n      const hash = pathname + search;\n\n      if (prevHash.current !== hash) {\n        prevHash.current = hash;\n        update({ path: pathname, search: search });\n      }\n    };\n\n    events.map((e) => addEventListener(e, checkForUpdates));\n\n    // it's possible that an update has occurred between render and the effect handler,\n    // so we run additional check on mount to catch these updates. Based on:\n    // https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n    checkForUpdates();\n\n    return () => events.map((e) => removeEventListener(e, checkForUpdates));\n  }, [base]);\n\n  // the 2nd argument of the `useLocation` return value is a function\n  // that allows to perform a navigation.\n  //\n  // the function reference should stay the same between re-renders, so that\n  // it can be passed down as an element prop without any performance concerns.\n  const navigate = useCallback(\n    (to, { replace = false } = {}) =>\n      history[replace ? eventReplaceState : eventPushState](\n        null,\n        \"\",\n        // handle nested routers and absolute paths\n        to[0] === \"~\" ? to.slice(1) : base + to\n      ),\n    [base]\n  );\n\n  return [pathAndSearch.path, navigate];\n};\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  for (const type of [eventPushState, eventReplaceState]) {\n    const original = history[type];\n\n    history[type] = function () {\n      const result = original.apply(this, arguments);\n      const event = new Event(type);\n      event.arguments = arguments;\n\n      dispatchEvent(event);\n      return result;\n    };\n  }\n}\n\nconst currentPathname = (base, path = location.pathname) =>\n  !path.toLowerCase().indexOf(base.toLowerCase())\n    ? path.slice(base.length) || \"/\"\n    : \"~\" + path;\n"]},"metadata":{},"sourceType":"module"}