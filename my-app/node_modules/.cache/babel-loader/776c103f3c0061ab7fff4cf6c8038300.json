{"ast":null,"code":"var _jsxFileName = \"E:\\\\Personal_Portfolio\\\\my-app\\\\src\\\\components\\\\About\\\\DNA.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport * as THREE from \"three\";\nimport MathEx from 'js-util/MathEx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DNA() {\n  _s();\n\n  const mountRef = useRef(null);\n  useEffect(() => {\n    var width = document.getElementById('container').offsetWidth;\n    var height = document.getElementById('container').offsetHeight;\n    console.log(width + 'x' + height);\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n    const renderTarget = new THREE.WebGLRenderTarget();\n    const scenePE = new THREE.Scene();\n    const cameraPE = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 2);\n    const dnaHelix = new DnaHelix();\n    const postEffect = new PostEffect(renderTarget.texture);\n    postEffect.createObj();\n    scenePE.add(postEffect.obj); // For the preloader.\n\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 3;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n    return () => mountRef.current.removeChild(renderer.domElement);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    id: \"container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DNA, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n\n_c = DNA;\n\nclass PostEffect {\n  constructor(texture) {\n    this.uniforms = {\n      time: {\n        type: 'f',\n        value: 0\n      },\n      texture: {\n        type: 't',\n        value: texture\n      },\n      resolution: {\n        type: 'v2',\n        value: new THREE.Vector2()\n      }\n    };\n    this.obj;\n  }\n\n  createObj() {\n    // Define Geometry\n    const geometry = new THREE.PlaneGeometry(2, 2); // Define Material\n\n    const material = new THREE.RawShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: require('./glsl/postEffect.vs').default,\n      fragmentShader: require('./glsl/postEffect.fs').default\n    }); // Create Object3D\n\n    this.obj = new THREE.Mesh(geometry, material);\n    this.obj.name = 'PostEffect';\n  }\n\n  resize(x, y) {\n    this.uniforms.resolution.value.set(x, y);\n  }\n\n  render(time) {\n    this.uniforms.time.value += time;\n  }\n\n}\n\nclass DnaHelix extends THREE.Points {\n  constructor() {\n    // Define Geometry\n    const geometry = new THREE.BufferGeometry(); // Define attributes of the instancing geometry\n\n    const numHelix = 6000;\n    const numLineSpace = 60;\n    const numLine = 100;\n    const numAmount = numHelix + numLineSpace * numLine;\n    const baPositions = new THREE.BufferAttribute(new Float32Array(numAmount * 3), 3);\n    const baRadians = new THREE.BufferAttribute(new Float32Array(numAmount), 1);\n    const baRadiuses = new THREE.BufferAttribute(new Float32Array(numAmount), 1);\n    const baDelays = new THREE.BufferAttribute(new Float32Array(numAmount), 1);\n\n    for (var i = 0; i < numHelix; i++) {\n      const random = Math.random();\n      const diff = {\n        x: (Math.random() * 2 - 1) * random * 6,\n        y: (Math.random() * 2 - 1) * random * 6,\n        z: (Math.random() * 2 - 1) * random * 6\n      };\n      baPositions.setXYZ(i, (i / numHelix * 2 - 1) * 150 + diff.x, diff.y, diff.z);\n      baRadians.setX(i, MathEx.radians(i / numHelix * 900 + i % 2 * 180));\n      baRadiuses.setX(i, 18);\n      baDelays.setX(i, MathEx.radians(Math.random() * 360));\n    }\n\n    for (var j = 0; j < numLineSpace; j++) {\n      const radians = MathEx.radians(j / numLineSpace * 900);\n\n      for (var k = 0; k < numLine; k++) {\n        const index = j * numLine + k + numHelix;\n        const random = Math.random();\n        const diff = {\n          x: (Math.random() * 2 - 1) * random * 1,\n          y: (Math.random() * 2 - 1) * random * 1,\n          z: (Math.random() * 2 - 1) * random * 1\n        };\n        baPositions.setXYZ(index, (j / numLineSpace * 2 - 1) * 150 + diff.x, diff.y, diff.z);\n        baRadians.setX(index, radians);\n        baRadiuses.setX(index, (k / numLine * 2 - 1) * 18);\n        baDelays.setX(index, MathEx.radians(Math.random() * 360));\n      }\n    }\n\n    geometry.setAttribute('position', baPositions);\n    geometry.setAttribute('radian', baRadians);\n    geometry.setAttribute('radius', baRadiuses);\n    geometry.setAttribute('delay', baDelays); // Define Material\n\n    const material = new THREE.RawShaderMaterial({\n      uniforms: {\n        time: {\n          type: 'f',\n          value: 0\n        }\n      },\n      vertexShader: require('./glsl/DnaHelix.vs').default,\n      fragmentShader: require('./glsl/DnaHelix.fs').default,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    }); // Create Object3D\n\n    super(geometry, material);\n    this.name = 'DNA Herix';\n  }\n\n  render(time) {\n    this.material.uniforms.time.value += time;\n  }\n\n}\n\nexport default DNA;\n\nvar _c;\n\n$RefreshReg$(_c, \"DNA\");","map":{"version":3,"sources":["E:/Personal_Portfolio/my-app/src/components/About/DNA.js"],"names":["useEffect","useRef","THREE","MathEx","DNA","mountRef","width","document","getElementById","offsetWidth","height","offsetHeight","console","log","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","alpha","setSize","current","appendChild","domElement","renderTarget","WebGLRenderTarget","scenePE","cameraPE","OrthographicCamera","dnaHelix","DnaHelix","postEffect","PostEffect","texture","createObj","add","obj","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","z","animate","requestAnimationFrame","rotation","x","y","render","removeChild","constructor","uniforms","time","type","value","resolution","Vector2","PlaneGeometry","RawShaderMaterial","vertexShader","require","default","fragmentShader","name","resize","set","Points","BufferGeometry","numHelix","numLineSpace","numLine","numAmount","baPositions","BufferAttribute","Float32Array","baRadians","baRadiuses","baDelays","i","random","Math","diff","setXYZ","setX","radians","j","k","index","setAttribute","transparent","blending","AdditiveBlending","depthWrite"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport * as THREE from \"three\";\r\nimport MathEx from 'js-util/MathEx';\r\nfunction DNA() {\r\n\r\n    const mountRef = useRef(null);\r\n    useEffect(() => {\r\n        var width = document.getElementById('container').offsetWidth;\r\n        var height = document.getElementById('container').offsetHeight;\r\n        console.log(width+'x'+height);\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );\r\n        var renderer = new THREE.WebGLRenderer( { alpha: true } );\r\n        \r\n        renderer.setSize(width, height);\r\n        \r\n        mountRef.current.appendChild( renderer.domElement );\r\n        \r\n        const renderTarget = new THREE.WebGLRenderTarget();\r\n        const scenePE = new THREE.Scene();\r\n        const cameraPE = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 2);\r\n\r\n        const dnaHelix = new DnaHelix();\r\n\r\n        const postEffect = new PostEffect(renderTarget.texture);\r\n        postEffect.createObj();\r\n        scenePE.add(postEffect.obj);\r\n\r\n\r\n  // For the preloader.\r\n\r\n        var geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n        var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n        var cube = new THREE.Mesh( geometry, material );\r\n        \r\n        scene.add( cube );\r\n        camera.position.z = 3;\r\n        \r\n        var animate = function () {\r\n          requestAnimationFrame( animate );\r\n          cube.rotation.x += 0.01;\r\n          cube.rotation.y += 0.01;\r\n          renderer.render( scene, camera );\r\n        };\r\n        \r\n        animate();\r\n    \r\n        return () => mountRef.current.removeChild( renderer.domElement);\r\n      }, []);\r\n\r\n    return (\r\n        <div ref={mountRef} id=\"container\">\r\n        </div>\r\n    )\r\n}\r\nclass PostEffect {\r\n    constructor(texture) {\r\n      this.uniforms = {\r\n        time: {\r\n          type: 'f',\r\n          value: 0,\r\n        },\r\n        texture: {\r\n          type: 't',\r\n          value: texture,\r\n        },\r\n        resolution: {\r\n          type: 'v2',\r\n          value: new THREE.Vector2(),\r\n        },\r\n      };\r\n      this.obj;\r\n    }\r\n    createObj() {\r\n      // Define Geometry\r\n      const geometry = new THREE.PlaneGeometry(2, 2);\r\n  \r\n      // Define Material\r\n      const material = new THREE.RawShaderMaterial({\r\n        uniforms: this.uniforms,\r\n        vertexShader: require('./glsl/postEffect.vs').default,\r\n        fragmentShader: require('./glsl/postEffect.fs').default,\r\n      });\r\n  \r\n      // Create Object3D\r\n      this.obj = new THREE.Mesh(geometry, material);\r\n      this.obj.name = 'PostEffect';\r\n    }\r\n    resize(x, y) {\r\n      this.uniforms.resolution.value.set(x, y);\r\n    }\r\n    render(time) {\r\n      this.uniforms.time.value += time;\r\n    }\r\n  }\r\nclass DnaHelix extends THREE.Points {\r\n    constructor() {\r\n      // Define Geometry\r\n      const geometry = new THREE.BufferGeometry();\r\n  \r\n      // Define attributes of the instancing geometry\r\n      const numHelix = 6000;\r\n      const numLineSpace = 60;\r\n      const numLine = 100;\r\n      const numAmount = numHelix + numLineSpace * numLine;\r\n      const baPositions = new THREE.BufferAttribute(new Float32Array(numAmount * 3), 3);\r\n      const baRadians = new THREE.BufferAttribute(new Float32Array(numAmount), 1);\r\n      const baRadiuses = new THREE.BufferAttribute(new Float32Array(numAmount), 1);\r\n      const baDelays = new THREE.BufferAttribute(new Float32Array(numAmount), 1);\r\n      for (var i = 0; i < numHelix; i++) {\r\n        const random = Math.random();\r\n        const diff = {\r\n          x: (Math.random() * 2 - 1) * random * 6,\r\n          y: (Math.random() * 2 - 1) * random * 6,\r\n          z: (Math.random() * 2 - 1) * random * 6,\r\n        };\r\n        baPositions.setXYZ(\r\n          i,\r\n          ((i / numHelix) * 2 - 1) * 150 + diff.x,\r\n          diff.y,\r\n          diff.z\r\n        );\r\n        baRadians.setX(i, MathEx.radians(i / numHelix * 900 + i % 2 * 180));\r\n        baRadiuses.setX(i, 18);\r\n        baDelays.setX(i, MathEx.radians(Math.random() * 360));\r\n      }\r\n      for (var j = 0; j < numLineSpace; j++) {\r\n        const radians = MathEx.radians(j / numLineSpace * 900);\r\n        for (var k = 0; k < numLine; k++) {\r\n          const index = j * numLine + k + numHelix;\r\n          const random = Math.random();\r\n          const diff = {\r\n            x: (Math.random() * 2 - 1) * random * 1,\r\n            y: (Math.random() * 2 - 1) * random * 1,\r\n            z: (Math.random() * 2 - 1) * random * 1,\r\n          };\r\n          baPositions.setXYZ(\r\n            index,\r\n            ((j / numLineSpace) * 2 - 1) * 150 + diff.x,\r\n            diff.y,\r\n            diff.z\r\n          );\r\n          baRadians.setX(index, radians);\r\n          baRadiuses.setX(index, (k / numLine * 2 - 1) * 18);\r\n          baDelays.setX(index, MathEx.radians(Math.random() * 360));\r\n        }\r\n      }\r\n      geometry.setAttribute('position', baPositions);\r\n      geometry.setAttribute('radian', baRadians);\r\n      geometry.setAttribute('radius', baRadiuses);\r\n      geometry.setAttribute('delay', baDelays);\r\n  \r\n      // Define Material\r\n      const material = new THREE.RawShaderMaterial({\r\n        uniforms: {\r\n          time: {\r\n            type: 'f',\r\n            value: 0\r\n          },\r\n        },\r\n        vertexShader: require('./glsl/DnaHelix.vs').default,\r\n        fragmentShader: require('./glsl/DnaHelix.fs').default,\r\n        transparent: true,\r\n        blending: THREE.AdditiveBlending,\r\n        depthWrite: false,\r\n      });\r\n  \r\n      // Create Object3D\r\n      super(geometry, material);\r\n      this.name = 'DNA Herix';\r\n    }\r\n    render(time) {\r\n      this.material.uniforms.time.value += time;\r\n    }\r\n  }\r\nexport default DNA\r\n"]},"metadata":{},"sourceType":"module"}